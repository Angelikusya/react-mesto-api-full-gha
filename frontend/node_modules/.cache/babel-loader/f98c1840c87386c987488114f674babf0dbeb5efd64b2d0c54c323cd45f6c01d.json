{"ast":null,"code":"export const BASE_URL = 'http://localhost:3001';\nconst checkResponse = res => {\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n};\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res)).then(data => {\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n      return data;\n    }\n  });\n};\nexport const checkToken = () => {\n  const token = localStorage.getItem('jwt');\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => checkResponse(res));\n};","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","login","data","token","localStorage","setItem","checkToken","getItem"],"sources":["/Users/anzhelika/Desktop/dev/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'http://localhost:3001';\n\nconst checkResponse = (res) => {\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n};\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: \"application/json\",\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then((res) => checkResponse(res))\n};\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then((res) => checkResponse(res))\n  .then(data => {\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n      return data;\n    }\n  });\n};\n\nexport const checkToken =() => {\n  const token = localStorage.getItem('jwt')\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization' : `Bearer ${token}`\n    }\n  })\n  .then((res) => checkResponse(res))\n};"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;AAE/C,MAAMC,aAAa,GAAIC,GAAG,IAAK;EAC7B,OAAOA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;AACtE,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACR,KAAK;MAAEC;IAAQ,CAAC;EACxC,CAAC,CAAC,CACDQ,IAAI,CAAEhB,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC;AACpC,CAAC;AAED,OAAO,MAAMiB,KAAK,GAAGA,CAACV,KAAK,EAAEC,QAAQ,KAAK;EACxC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACR,KAAK;MAAEC;IAAQ,CAAC;EACxC,CAAC,CAAC,CACDQ,IAAI,CAAEhB,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC,CACjCgB,IAAI,CAACE,IAAI,IAAI;IACZ,IAAIA,IAAI,CAACC,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAAC;MACzC,OAAOD,IAAI;IACb;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,UAAU,GAAEA,CAAA,KAAM;EAC7B,MAAMH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,KAAK,CAAC;EACzC,OAAOd,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAI,UAASQ,KAAM;IACpC;EACF,CAAC,CAAC,CACDH,IAAI,CAAEhB,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC;AACpC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}